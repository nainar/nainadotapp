{"ast":null,"code":"import { getSortedPostsData } from '../lib/posts';\n\nconst blogPostsXml = blogPosts => {\n  let latestPost = 0;\n  let postsXml = \"\";\n  blogPosts.map(post => {\n    const postDate = Date.parse(post.createdAt);\n\n    if (!latestPost || postDate > latestPost) {\n      latestPost = postDate;\n    }\n\n    postsXml += `\n    <url>\n      <loc>${post.url}</loc>\n      <lastmod>${postDate}</lastmod>\n      <priority>0.80</priority>\n    </url>`;\n  });\n  return {\n    postsXml,\n    latestPost\n  };\n};\n\nconst sitemapXml = blogPosts => {\n  const {\n    postsXml,\n    latestPost\n  } = blogPostsXml(blogPosts);\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n    <url>\n      <loc>https://naina.app/</loc>\n      <lastmod>${latestPost}</lastmod>\n      <priority>1.00</priority>\n    </url>\n    <url>\n      <loc>https://naina.app/posts</loc>\n      <priority>0.8</priority>\n    </url>\n    <url>\n      <loc>https://naina.app/work</loc>\n      <priority>0.7</priority>\n    </url>\n    <url>\n      <loc>https://naina.app/talks</loc>\n      <priority>0.5</priority>\n    </url>\n    ${postsXml}\n  </urlset>`;\n};\n\nconst Sitemap = () => {};\n\nSitemap.getInitialProps = async ({\n  res\n}) => {\n  const blogPosts = getSortedPostsData();\n  res.setHeader(\"Content-Type\", \"text/xml\");\n  res.write(sitemapXml(blogPosts));\n  res.end();\n};","map":{"version":3,"sources":["/Users/nainar/nainadotapp/pages/sitemap.xml.ts"],"names":["getSortedPostsData","blogPostsXml","blogPosts","latestPost","postsXml","map","post","postDate","Date","parse","createdAt","url","sitemapXml","Sitemap","getInitialProps","res","setHeader","write","end"],"mappings":"AACA,SAASA,kBAAT,QAAmC,cAAnC;;AAEA,MAAMC,YAAY,GAAIC,SAAD,IAAuB;AAC1C,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,QAAQ,GAAG,EAAf;AACAF,EAAAA,SAAS,CAACG,GAAV,CAAcC,IAAI,IAAI;AACpB,UAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACI,SAAhB,CAAjB;;AACA,QAAI,CAACP,UAAD,IAAeI,QAAQ,GAAGJ,UAA9B,EAA0C;AACxCA,MAAAA,UAAU,GAAGI,QAAb;AACD;;AACDH,IAAAA,QAAQ,IAAK;;aAEJE,IAAI,CAACK,GAAI;iBACLJ,QAAS;;WAHtB;AAMD,GAXD;AAYA,SAAO;AACLH,IAAAA,QADK;AAELD,IAAAA;AAFK,GAAP;AAID,CAnBD;;AAqBA,MAAMS,UAAU,GAAIV,SAAD,IAAuB;AACxC,QAAM;AAAEE,IAAAA,QAAF;AAAYD,IAAAA;AAAZ,MAA2BF,YAAY,CAACC,SAAD,CAA7C;AACA,SAAQ;;;;iBAIOC,UAAW;;;;;;;;;;;;;;;MAetBC,QAAS;YAnBb;AAqBD,CAvBD;;AAyBA,MAAMS,OAAO,GAAG,MAAM,CAAE,CAAxB;;AAEAA,OAAO,CAACC,eAAR,GAA0B,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAoC;AAC5D,QAAMb,SAAS,GAAGF,kBAAkB,EAApC;AACAe,EAAAA,GAAG,CAACC,SAAJ,CAAc,cAAd,EAA8B,UAA9B;AACAD,EAAAA,GAAG,CAACE,KAAJ,CAAUL,UAAU,CAACV,SAAD,CAApB;AACAa,EAAAA,GAAG,CAACG,GAAJ;AACD,CALD","sourcesContent":["import { NextPageContext } from \"next\";\nimport { getSortedPostsData } from '../lib/posts'\n\nconst blogPostsXml = (blogPosts: Post[]) => {\n  let latestPost = 0;\n  let postsXml = \"\";\n  blogPosts.map(post => {\n    const postDate = Date.parse(post.createdAt);\n    if (!latestPost || postDate > latestPost) {\n      latestPost = postDate;\n    }\n    postsXml += `\n    <url>\n      <loc>${post.url}</loc>\n      <lastmod>${postDate}</lastmod>\n      <priority>0.80</priority>\n    </url>`;\n  });\n  return {\n    postsXml,\n    latestPost\n  };\n};\n\nconst sitemapXml = (blogPosts: Post[]) => {\n  const { postsXml, latestPost } = blogPostsXml(blogPosts);\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n    <url>\n      <loc>https://naina.app/</loc>\n      <lastmod>${latestPost}</lastmod>\n      <priority>1.00</priority>\n    </url>\n    <url>\n      <loc>https://naina.app/posts</loc>\n      <priority>0.8</priority>\n    </url>\n    <url>\n      <loc>https://naina.app/work</loc>\n      <priority>0.7</priority>\n    </url>\n    <url>\n      <loc>https://naina.app/talks</loc>\n      <priority>0.5</priority>\n    </url>\n    ${postsXml}\n  </urlset>`;\n};\n\nconst Sitemap = () => {};\n\nSitemap.getInitialProps = async ({ res }: NextPageContext) => {\n  const blogPosts = getSortedPostsData();\n  res.setHeader(\"Content-Type\", \"text/xml\");\n  res.write(sitemapXml(blogPosts));\n  res.end();\n};"]},"metadata":{},"sourceType":"module"}