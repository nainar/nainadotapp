{"ast":null,"code":"var _jsxFileName = \"/Users/nainar/nainadotapp/pages/posts.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Layout from '../components/MyLayout';\nimport Link from 'next/link';\nexport const config = {\n  amp: true\n};\nconst postsDirectory = path.join(process.cwd(), 'posts');\n\nfunction HomePage() {\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, __jsx(\"main\", {\n    className: \"jsx-4109088840\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    className: \"jsx-4109088840\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"Hi! \\uD83D\\uDC4B\\uD83C\\uDFFE Yup, still Naina...\"), __jsx(\"br\", {\n    className: \"jsx-4109088840\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"jsx-4109088840\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"Guess I still haven't put up any posts. Oops! \\uD83E\\uDD37\\uD83C\\uDFFE.\")), __jsx(_JSXStyle, {\n    id: \"4109088840\",\n    __self: this\n  }, \"@font-face{font-family:'Bai Jamjuree';font-style:sans-serif;src:url('https://fonts.googleapis.com/css?family=Bai+Jamjuree');}*.jsx-4109088840{font-family:'Bai Jamjuree',sans-serif;-webkit-text-decoration:none;text-decoration:none;}h1.jsx-4109088840{color:#d8156e;}main.jsx-4109088840{position:fixed;margin:0;color:#333333;top:calc(50% - 16px);left:50%;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);}@media only screen and (max-width:768px){main.jsx-4109088840{top:4em;left:1em;-webkit-transform:translate(0%,0%);-ms-transform:translate(0%,0%);transform:translate(0%,0%);}}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9uYWluYXIvbmFpbmFkb3RhcHAvcGFnZXMvcG9zdHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0JnQixBQUdvQyxBQUtZLEFBSTFCLEFBR0EsQUFVTCxRQUNDLE1BYmIsQ0FHVyxFQVdxQixPQVZoQixHQWJVLFdBS0QsQUFTRixXQWI2QyxVQWN6RCxTQUN1QixvQkFWbEMsc0JBa0JFLEdBdEJGLDREQWVBIiwiZmlsZSI6Ii9Vc2Vycy9uYWluYXIvbmFpbmFkb3RhcHAvcGFnZXMvcG9zdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTGF5b3V0IGZyb20gJy4uL2NvbXBvbmVudHMvTXlMYXlvdXQnO1xuaW1wb3J0IExpbmsgZnJvbSAnbmV4dC9saW5rJztcblxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHsgYW1wOiB0cnVlIH07XG5jb25zdCBwb3N0c0RpcmVjdG9yeSA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAncG9zdHMnKVxuXG5mdW5jdGlvbiBIb21lUGFnZSgpIHtcbiAgcmV0dXJuIChcbiAgICA8TGF5b3V0PlxuICAgICAgPG1haW4+XG4gICAgICAgICAgPGgxPkhpISDwn5GL8J+PviBZdXAsIHN0aWxsIE5haW5hLi4uPC9oMT5cbiAgICAgICAgICA8YnIvPlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICBHdWVzcyBJIHN0aWxsIGhhdmVuJ3QgcHV0IHVwIGFueSBwb3N0cy4gT29wcyEg8J+kt/Cfj74uXG4gICAgICAgICAgPC9kaXY+ICAgICAgICAgIFxuICAgICAgPC9tYWluPlxuICAgIDxzdHlsZSBqc3g+e2BcbiAgICBAZm9udC1mYWNlIHtcbiAgICAgICAgZm9udC1mYW1pbHk6ICdCYWkgSmFtanVyZWUnO1xuICAgICAgICBmb250LXN0eWxlOiBzYW5zLXNlcmlmO1xuICAgICAgICBzcmM6IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUJhaStKYW1qdXJlZScpO1xuICAgIH1cbiAgICAqIHtcbiAgICAgICAgZm9udC1mYW1pbHk6ICdCYWkgSmFtanVyZWUnLCBzYW5zLXNlcmlmO1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgfVxuICAgIGgxIHtcbiAgICAgICAgY29sb3I6I2Q4MTU2ZTtcbiAgICB9XG4gICAgbWFpbiB7XG4gICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICBtYXJnaW46IDA7XG4gICAgICBjb2xvcjogIzMzMzMzMztcbiAgICAgIHRvcDogY2FsYyg1MCUgLSAxNnB4KTtcbiAgICAgIGxlZnQ6IDUwJTtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICAgIH1cbiAgICBcbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgICBtYWluIHtcbiAgICAgICAgdG9wOiA0ZW07XG4gICAgICAgIGxlZnQ6IDFlbTtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCUsIDAlKTtcbiAgICAgIH0gIFxuICAgIH1cblxuICBgfTwvc3R5bGU+XG4gICAgPC9MYXlvdXQ+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEhvbWVQYWdlO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxsUG9zdElkcygpIHtcbiAgY29uc3QgZmlsZU5hbWVzID0gZnMucmVhZGRpclN5bmMocG9zdHNEaXJlY3RvcnkpXG5cbiAgLy8gUmV0dXJucyBhbiBhcnJheSB0aGF0IGxvb2tzIGxpa2UgdGhpczpcbiAgLy8gW1xuICAvLyAgIHtcbiAgLy8gICAgIHBhcmFtczoge1xuICAvLyAgICAgICBpZDogJ3NzZy1zc3InXG4gIC8vICAgICB9XG4gIC8vICAgfSxcbiAgLy8gICB7XG4gIC8vICAgICBwYXJhbXM6IHtcbiAgLy8gICAgICAgaWQ6ICdwcmUtcmVuZGVyaW5nJ1xuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gXVxuICByZXR1cm4gZmlsZU5hbWVzLm1hcChmaWxlTmFtZSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBpZDogZmlsZU5hbWUucmVwbGFjZSgvXFwubWQkLywgJycpXG4gICAgICB9XG4gICAgfVxuICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UG9zdERhdGEoaWQpIHtcbiAgY29uc3QgZnVsbFBhdGggPSBwYXRoLmpvaW4ocG9zdHNEaXJlY3RvcnksIGAke2lkfS5tZGApXG4gIGNvbnN0IGZpbGVDb250ZW50cyA9IGZzLnJlYWRGaWxlU3luYyhmdWxsUGF0aCwgJ3V0ZjgnKVxuXG4gIC8vIFVzZSBncmF5LW1hdHRlciB0byBwYXJzZSB0aGUgcG9zdCBtZXRhZGF0YSBzZWN0aW9uXG4gIGNvbnN0IG1hdHRlclJlc3VsdCA9IG1hdHRlcihmaWxlQ29udGVudHMpXG5cbiAgLy8gQ29tYmluZSB0aGUgZGF0YSB3aXRoIHRoZSBpZFxuICByZXR1cm4ge1xuICAgIGlkLFxuICAgIC4uLm1hdHRlclJlc3VsdC5kYXRhXG4gIH1cbn0iXX0= */\\n/*@ sourceURL=/Users/nainar/nainadotapp/pages/posts.js */\"));\n}\n\nexport default HomePage;\nexport function getAllPostIds() {\n  const fileNames = fs.readdirSync(postsDirectory); // Returns an array that looks like this:\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   },\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport function getPostData(id) {\n  const fullPath = path.join(postsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); // Combine the data with the id\n\n  return _objectSpread({\n    id\n  }, matterResult.data);\n}","map":{"version":3,"sources":["/Users/nainar/nainadotapp/pages/posts.js"],"names":["Layout","Link","config","amp","postsDirectory","path","join","process","cwd","HomePage","getAllPostIds","fileNames","fs","readdirSync","map","fileName","params","id","replace","getPostData","fullPath","fileContents","readFileSync","matterResult","matter","data"],"mappings":";;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,OAAO,MAAMC,MAAM,GAAG;AAAEC,EAAAA,GAAG,EAAE;AAAP,CAAf;AACP,MAAMC,cAAc,GAAGC,IAAI,CAACC,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;;AAEA,SAASC,QAAT,GAAoB;AAClB,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+EAHJ,CADF;AAAA;AAAA;AAAA,osHADF;AA0CD;;AAED,eAAeA,QAAf;AAEA,OAAO,SAASC,aAAT,GAAyB;AAC9B,QAAMC,SAAS,GAAGC,EAAE,CAACC,WAAH,CAAeT,cAAf,CAAlB,CAD8B,CAG9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOO,SAAS,CAACG,GAAV,CAAcC,QAAQ,IAAI;AAC/B,WAAO;AACLC,MAAAA,MAAM,EAAE;AACNC,QAAAA,EAAE,EAAEF,QAAQ,CAACG,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADE;AADH,KAAP;AAKD,GANM,CAAP;AAOD;AAED,OAAO,SAASC,WAAT,CAAqBF,EAArB,EAAyB;AAC9B,QAAMG,QAAQ,GAAGf,IAAI,CAACC,IAAL,CAAUF,cAAV,EAA2B,GAAEa,EAAG,KAAhC,CAAjB;AACA,QAAMI,YAAY,GAAGT,EAAE,CAACU,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAF8B,CAI9B;;AACA,QAAMG,YAAY,GAAGC,MAAM,CAACH,YAAD,CAA3B,CAL8B,CAO9B;;AACA;AACEJ,IAAAA;AADF,KAEKM,YAAY,CAACE,IAFlB;AAID","sourcesContent":["import Layout from '../components/MyLayout';\nimport Link from 'next/link';\n\nexport const config = { amp: true };\nconst postsDirectory = path.join(process.cwd(), 'posts')\n\nfunction HomePage() {\n  return (\n    <Layout>\n      <main>\n          <h1>Hi! üëãüèæ Yup, still Naina...</h1>\n          <br/>\n          <div>\n            Guess I still haven't put up any posts. Oops! ü§∑üèæ.\n          </div>          \n      </main>\n    <style jsx>{`\n    @font-face {\n        font-family: 'Bai Jamjuree';\n        font-style: sans-serif;\n        src: url('https://fonts.googleapis.com/css?family=Bai+Jamjuree');\n    }\n    * {\n        font-family: 'Bai Jamjuree', sans-serif;\n        text-decoration: none;\n    }\n    h1 {\n        color:#d8156e;\n    }\n    main {\n      position: fixed;\n      margin: 0;\n      color: #333333;\n      top: calc(50% - 16px);\n      left: 50%;\n      transform: translate(-50%, -50%);\n    }\n    \n    @media only screen and (max-width: 768px) {\n      main {\n        top: 4em;\n        left: 1em;\n        transform: translate(0%, 0%);\n      }  \n    }\n\n  `}</style>\n    </Layout>\n  );\n}\n\nexport default HomePage;\n\nexport function getAllPostIds() {\n  const fileNames = fs.readdirSync(postsDirectory)\n\n  // Returns an array that looks like this:\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   },\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    }\n  })\n}\n\nexport function getPostData(id) {\n  const fullPath = path.join(postsDirectory, `${id}.md`)\n  const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n  // Use gray-matter to parse the post metadata section\n  const matterResult = matter(fileContents)\n\n  // Combine the data with the id\n  return {\n    id,\n    ...matterResult.data\n  }\n}"]},"metadata":{},"sourceType":"module"}