{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { NextPageContext } from \"next\";\n\nvar blogPostsXml = function blogPostsXml(blogPostsData) {\n  var latestPost = 0;\n  var postsXml = \"\";\n  blogPostsData.map(function (post) {\n    var postDate = Date.parse(post.date);\n\n    if (!latestPost || postDate > latestPost) {\n      latestPost = postDate;\n    }\n\n    postsXml += \"\\n    <url>\\n      <loc>\".concat(post.id, \"</loc>\\n      <lastmod>\").concat(postDate, \"</lastmod>\\n      <priority>0.80</priority>\\n    </url>\");\n  });\n  return {\n    postsXml: postsXml,\n    latestPost: latestPost\n  };\n};\n\nvar sitemapXml = function sitemapXml(blogPostsData) {\n  var _blogPostsXml = blogPostsXml(blogPostsData),\n      postsXml = _blogPostsXml.postsXml,\n      latestPost = _blogPostsXml.latestPost;\n\n  return \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n    <urlset xmlns=\\\"http://www.sitemaps.org/schemas/sitemap/0.9\\\">\\n    <url>\\n      <loc>https://naina.app/</loc>\\n      <lastmod>\".concat(latestPost, \"</lastmod>\\n      <priority>1.00</priority>\\n    </url>\\n    <url>\\n      <loc>https://naina.app/posts</loc>\\n      <priority>0.8</priority>\\n    </url>\\n    <url>\\n      <loc>https://naina.app/work</loc>\\n      <priority>0.7</priority>\\n    </url>\\n    <url>\\n      <loc>https://naina.app/talks</loc>\\n      <priority>0.5</priority>\\n    </url>\\n    \").concat(postsXml, \"\\n  </urlset>\");\n};\n\nvar Sitemap = function Sitemap() {};\n\nSitemap.getInitialProps = function _callee(res) {\n  var blogPostsData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          blogPostsData = getSortedPostsData();\n          res.setHeader(\"Content-Type\", \"text/xml\");\n          res.write(sitemapXml(blogPosts));\n          res.end();\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nvar postsDirectory = path.join(process.cwd(), 'pages/p');\nexport function getSortedPostsData() {\n  // Get file names under /pages/p\n  var fileNames = fs.readdirSync(postsDirectory);\n  var allPostsData = fileNames.map(function (fileName) {\n    // Remove \".md\" from file name to get id\n    var id = fileName.replace(/\\.md$/, ''); // Read markdown file as string\n\n    var fullPath = path.join(postsDirectory, fileName);\n    var fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n    var matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id: id\n    }, matterResult.data);\n  }); // Sort posts by date\n\n  return allPostsData.sort(function (a, b) {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport function getAllPostIds() {\n  var fileNames = fs.readdirSync(postsDirectory); // Returns an array that looks like this:\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   },\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n\n  return fileNames.map(function (fileName) {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport function getPostData(id) {\n  var fullPath, fileContents, matterResult, processedContent, contentHtml;\n  return _regeneratorRuntime.async(function getPostData$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          fullPath = path.join(postsDirectory, \"\".concat(id, \".md\"));\n          fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n          matterResult = matter(fileContents); // Use remark to convert markdown into HTML string\n\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(remark().use(html).process(matterResult.content));\n\n        case 5:\n          processedContent = _context2.sent;\n          contentHtml = processedContent.toString(); // Combine the data with the id and contentHtml\n\n          return _context2.abrupt(\"return\", _objectSpread({\n            id: id,\n            contentHtml: contentHtml\n          }, matterResult.data));\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/Users/nainar/nainadotapp/pages/sitemap.xml.js"],"names":["NextPageContext","blogPostsXml","blogPostsData","latestPost","postsXml","map","post","postDate","Date","parse","date","id","sitemapXml","Sitemap","getInitialProps","res","getSortedPostsData","setHeader","write","blogPosts","end","fs","path","matter","remark","html","postsDirectory","join","process","cwd","fileNames","readdirSync","allPostsData","fileName","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","getAllPostIds","params","getPostData","use","content","processedContent","contentHtml","toString"],"mappings":";;;;;;;AAAA,SAASA,eAAT,QAAgC,MAAhC;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,aAAD,EAAmB;AACtC,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,QAAQ,GAAG,EAAf;AACAF,EAAAA,aAAa,CAACG,GAAd,CAAkB,UAAAC,IAAI,EAAI;AACxB,QAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACI,IAAhB,CAAjB;;AACA,QAAI,CAACP,UAAD,IAAeI,QAAQ,GAAGJ,UAA9B,EAA0C;AACxCA,MAAAA,UAAU,GAAGI,QAAb;AACD;;AACDH,IAAAA,QAAQ,sCAECE,IAAI,CAACK,EAFN,oCAGKJ,QAHL,4DAAR;AAMD,GAXD;AAYA,SAAO;AACLH,IAAAA,QAAQ,EAARA,QADK;AAELD,IAAAA,UAAU,EAAVA;AAFK,GAAP;AAID,CAnBD;;AAqBA,IAAMS,UAAU,GAAG,SAAbA,UAAa,CAACV,aAAD,EAAmB;AAAA,sBACHD,YAAY,CAACC,aAAD,CADT;AAAA,MAC5BE,QAD4B,iBAC5BA,QAD4B;AAAA,MAClBD,UADkB,iBAClBA,UADkB;;AAEpC,kMAIeA,UAJf,4WAmBIC,QAnBJ;AAqBD,CAvBD;;AAyBA,IAAMS,OAAO,GAAG,SAAVA,OAAU,GAAM,CAAE,CAAxB;;AAEAA,OAAO,CAACC,eAAR,GAA0B,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBb,UAAAA,aADkB,GACFc,kBAAkB,EADhB;AAExBD,UAAAA,GAAG,CAACE,SAAJ,CAAc,cAAd,EAA8B,UAA9B;AACAF,UAAAA,GAAG,CAACG,KAAJ,CAAUN,UAAU,CAACO,SAAD,CAApB;AACAJ,UAAAA,GAAG,CAACK,GAAJ;;AAJwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;;AAOA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,IAAMC,cAAc,GAAGJ,IAAI,CAACK,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,SAAzB,CAAvB;AAGA,OAAO,SAASb,kBAAT,GAA8B;AACjC;AACA,MAAMc,SAAS,GAAGT,EAAE,CAACU,WAAH,CAAeL,cAAf,CAAlB;AACA,MAAMM,YAAY,GAAGF,SAAS,CAACzB,GAAV,CAAc,UAAA4B,QAAQ,EAAI;AAC7C;AACA,QAAMtB,EAAE,GAAGsB,QAAQ,CAACC,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAF6C,CAI7C;;AACA,QAAMC,QAAQ,GAAGb,IAAI,CAACK,IAAL,CAAUD,cAAV,EAA0BO,QAA1B,CAAjB;AACA,QAAMG,YAAY,GAAGf,EAAE,CAACgB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAN6C,CAQ7C;;AACA,QAAMG,YAAY,GAAGf,MAAM,CAACa,YAAD,CAA3B,CAT6C,CAW7C;;AACA;AACEzB,MAAAA,EAAE,EAAFA;AADF,OAEK2B,YAAY,CAACC,IAFlB;AAID,GAhBoB,CAArB,CAHiC,CAoBjC;;AACA,SAAOP,YAAY,CAACQ,IAAb,CAAkB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACjC,QAAID,CAAC,CAAC/B,IAAF,GAASgC,CAAC,CAAChC,IAAf,EAAqB;AACnB,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF,GANM,CAAP;AAOD;AAED,OAAO,SAASiC,aAAT,GAAyB;AAC9B,MAAMb,SAAS,GAAGT,EAAE,CAACU,WAAH,CAAeL,cAAf,CAAlB,CAD8B,CAG9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOI,SAAS,CAACzB,GAAV,CAAc,UAAA4B,QAAQ,EAAI;AAC/B,WAAO;AACLW,MAAAA,MAAM,EAAE;AACNjC,QAAAA,EAAE,EAAEsB,QAAQ,CAACC,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADE;AADH,KAAP;AAKD,GANM,CAAP;AAOD;AAED,OAAO,SAAeW,WAAf,CAA2BlC,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACCwB,UAAAA,QADD,GACYb,IAAI,CAACK,IAAL,CAAUD,cAAV,YAA6Bf,EAA7B,SADZ;AAECyB,UAAAA,YAFD,GAEgBf,EAAE,CAACgB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAFhB,EAIL;;AACMG,UAAAA,YALD,GAKgBf,MAAM,CAACa,YAAD,CALtB,EAOL;;AAPK;AAAA,2CAQ0BZ,MAAM,GAClCsB,GAD4B,CACxBrB,IADwB,EAE5BG,OAF4B,CAEpBU,YAAY,CAACS,OAFO,CAR1B;;AAAA;AAQCC,UAAAA,gBARD;AAWCC,UAAAA,WAXD,GAWeD,gBAAgB,CAACE,QAAjB,EAXf,EAaL;;AAbK;AAeHvC,YAAAA,EAAE,EAAFA,EAfG;AAgBHsC,YAAAA,WAAW,EAAXA;AAhBG,aAiBAX,YAAY,CAACC,IAjBb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { NextPageContext } from \"next\";\n\nconst blogPostsXml = (blogPostsData) => {\n  let latestPost = 0;\n  let postsXml = \"\";\n  blogPostsData.map(post => {\n    const postDate = Date.parse(post.date);\n    if (!latestPost || postDate > latestPost) {\n      latestPost = postDate;\n    }\n    postsXml += `\n    <url>\n      <loc>${post.id}</loc>\n      <lastmod>${postDate}</lastmod>\n      <priority>0.80</priority>\n    </url>`;\n  });\n  return {\n    postsXml,\n    latestPost\n  };\n};\n\nconst sitemapXml = (blogPostsData) => {\n  const { postsXml, latestPost } = blogPostsXml(blogPostsData);\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n    <url>\n      <loc>https://naina.app/</loc>\n      <lastmod>${latestPost}</lastmod>\n      <priority>1.00</priority>\n    </url>\n    <url>\n      <loc>https://naina.app/posts</loc>\n      <priority>0.8</priority>\n    </url>\n    <url>\n      <loc>https://naina.app/work</loc>\n      <priority>0.7</priority>\n    </url>\n    <url>\n      <loc>https://naina.app/talks</loc>\n      <priority>0.5</priority>\n    </url>\n    ${postsXml}\n  </urlset>`;\n};\n\nconst Sitemap = () => {};\n\nSitemap.getInitialProps = async (res) => {\n  const blogPostsData = getSortedPostsData();\n  res.setHeader(\"Content-Type\", \"text/xml\");\n  res.write(sitemapXml(blogPosts));\n  res.end();\n};\n\nimport fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\nimport remark from 'remark'\nimport html from 'remark-html'\n\nconst postsDirectory = path.join(process.cwd(), 'pages/p')\n\n\nexport function getSortedPostsData() {\n    // Get file names under /pages/p\n    const fileNames = fs.readdirSync(postsDirectory)\n    const allPostsData = fileNames.map(fileName => {\n      // Remove \".md\" from file name to get id\n      const id = fileName.replace(/\\.md$/, '')\n  \n      // Read markdown file as string\n      const fullPath = path.join(postsDirectory, fileName)\n      const fileContents = fs.readFileSync(fullPath, 'utf8')\n  \n      // Use gray-matter to parse the post metadata section\n      const matterResult = matter(fileContents)\n  \n      // Combine the data with the id\n      return {\n        id,\n        ...matterResult.data\n      }\n    })\n    // Sort posts by date\n    return allPostsData.sort((a, b) => {\n      if (a.date < b.date) {\n        return 1\n      } else {\n        return -1\n      }\n    })\n  }\n  \n  export function getAllPostIds() {\n    const fileNames = fs.readdirSync(postsDirectory)\n  \n    // Returns an array that looks like this:\n    // [\n    //   {\n    //     params: {\n    //       id: 'ssg-ssr'\n    //     }\n    //   },\n    //   {\n    //     params: {\n    //       id: 'pre-rendering'\n    //     }\n    //   }\n    // ]\n    return fileNames.map(fileName => {\n      return {\n        params: {\n          id: fileName.replace(/\\.md$/, '')\n        }\n      }\n    })\n  }\n  \n  export async function getPostData(id) {\n    const fullPath = path.join(postsDirectory, `${id}.md`)\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n  \n    // Use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents)\n  \n    // Use remark to convert markdown into HTML string\n    const processedContent = await remark()\n      .use(html)\n      .process(matterResult.content)\n    const contentHtml = processedContent.toString()\n  \n    // Combine the data with the id and contentHtml\n    return {\n      id,\n      contentHtml,\n      ...matterResult.data\n    }\n  }"]},"metadata":{},"sourceType":"module"}