{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { NextPageContext } from \"next\";\n\nconst blogPostsXml = blogPostsData => {\n  let latestPost = 0;\n  let postsXml = \"\";\n  blogPostsData.map(post => {\n    const postDate = Date.parse(post.date);\n\n    if (!latestPost || postDate > latestPost) {\n      latestPost = postDate;\n    }\n\n    postsXml += `\n    <url>\n      <loc>${post.id}</loc>\n      <lastmod>${postDate}</lastmod>\n      <priority>0.80</priority>\n    </url>`;\n  });\n  return {\n    postsXml,\n    latestPost\n  };\n};\n\nconst sitemapXml = blogPostsData => {\n  const {\n    postsXml,\n    latestPost\n  } = blogPostsXml(blogPostsData);\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n    <url>\n      <loc>https://naina.app/</loc>\n      <lastmod>${latestPost}</lastmod>\n      <priority>1.00</priority>\n    </url>\n    <url>\n      <loc>https://naina.app/posts</loc>\n      <priority>0.8</priority>\n    </url>\n    <url>\n      <loc>https://naina.app/work</loc>\n      <priority>0.7</priority>\n    </url>\n    <url>\n      <loc>https://naina.app/talks</loc>\n      <priority>0.5</priority>\n    </url>\n    ${postsXml}\n  </urlset>`;\n};\n\nconst Sitemap = () => {};\n\nSitemap.getInitialProps = async res => {\n  const blogPostsData = getSortedPostsData();\n  res.setHeader(\"Content-Type\", \"text/xml\");\n  res.write(sitemapXml(blogPosts));\n  res.end();\n};\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nconst postsDirectory = path.join(process.cwd(), 'pages/p');\nexport function getSortedPostsData() {\n  // Get file names under /pages/p\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, ''); // Read markdown file as string\n\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n    const matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  }); // Sort posts by date\n\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport function getAllPostIds() {\n  const fileNames = fs.readdirSync(postsDirectory); // Returns an array that looks like this:\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   },\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport async function getPostData(id) {\n  const fullPath = path.join(postsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); // Use remark to convert markdown into HTML string\n\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString(); // Combine the data with the id and contentHtml\n\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}","map":{"version":3,"sources":["/Users/nainar/nainadotapp/pages/sitemap.xml.js"],"names":["NextPageContext","blogPostsXml","blogPostsData","latestPost","postsXml","map","post","postDate","Date","parse","date","id","sitemapXml","Sitemap","getInitialProps","res","getSortedPostsData","setHeader","write","blogPosts","end","fs","path","matter","remark","html","postsDirectory","join","process","cwd","fileNames","readdirSync","allPostsData","fileName","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","getAllPostIds","params","getPostData","processedContent","use","content","contentHtml","toString"],"mappings":"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","sourcesContent":["import { NextPageContext } from \"next\";\n\nconst blogPostsXml = (blogPostsData) => {\n  let latestPost = 0;\n  let postsXml = \"\";\n  blogPostsData.map(post => {\n    const postDate = Date.parse(post.date);\n    if (!latestPost || postDate > latestPost) {\n      latestPost = postDate;\n    }\n    postsXml += `\n    <url>\n      <loc>${post.id}</loc>\n      <lastmod>${postDate}</lastmod>\n      <priority>0.80</priority>\n    </url>`;\n  });\n  return {\n    postsXml,\n    latestPost\n  };\n};\n\nconst sitemapXml = (blogPostsData) => {\n  const { postsXml, latestPost } = blogPostsXml(blogPostsData);\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n    <url>\n      <loc>https://naina.app/</loc>\n      <lastmod>${latestPost}</lastmod>\n      <priority>1.00</priority>\n    </url>\n    <url>\n      <loc>https://naina.app/posts</loc>\n      <priority>0.8</priority>\n    </url>\n    <url>\n      <loc>https://naina.app/work</loc>\n      <priority>0.7</priority>\n    </url>\n    <url>\n      <loc>https://naina.app/talks</loc>\n      <priority>0.5</priority>\n    </url>\n    ${postsXml}\n  </urlset>`;\n};\n\nconst Sitemap = () => {};\n\nSitemap.getInitialProps = async (res) => {\n  const blogPostsData = getSortedPostsData();\n  res.setHeader(\"Content-Type\", \"text/xml\");\n  res.write(sitemapXml(blogPosts));\n  res.end();\n};\n\nimport fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\nimport remark from 'remark'\nimport html from 'remark-html'\n\nconst postsDirectory = path.join(process.cwd(), 'pages/p')\n\n\nexport function getSortedPostsData() {\n    // Get file names under /pages/p\n    const fileNames = fs.readdirSync(postsDirectory)\n    const allPostsData = fileNames.map(fileName => {\n      // Remove \".md\" from file name to get id\n      const id = fileName.replace(/\\.md$/, '')\n  \n      // Read markdown file as string\n      const fullPath = path.join(postsDirectory, fileName)\n      const fileContents = fs.readFileSync(fullPath, 'utf8')\n  \n      // Use gray-matter to parse the post metadata section\n      const matterResult = matter(fileContents)\n  \n      // Combine the data with the id\n      return {\n        id,\n        ...matterResult.data\n      }\n    })\n    // Sort posts by date\n    return allPostsData.sort((a, b) => {\n      if (a.date < b.date) {\n        return 1\n      } else {\n        return -1\n      }\n    })\n  }\n  \n  export function getAllPostIds() {\n    const fileNames = fs.readdirSync(postsDirectory)\n  \n    // Returns an array that looks like this:\n    // [\n    //   {\n    //     params: {\n    //       id: 'ssg-ssr'\n    //     }\n    //   },\n    //   {\n    //     params: {\n    //       id: 'pre-rendering'\n    //     }\n    //   }\n    // ]\n    return fileNames.map(fileName => {\n      return {\n        params: {\n          id: fileName.replace(/\\.md$/, '')\n        }\n      }\n    })\n  }\n  \n  export async function getPostData(id) {\n    const fullPath = path.join(postsDirectory, `${id}.md`)\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n  \n    // Use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents)\n  \n    // Use remark to convert markdown into HTML string\n    const processedContent = await remark()\n      .use(html)\n      .process(matterResult.content)\n    const contentHtml = processedContent.toString()\n  \n    // Combine the data with the id and contentHtml\n    return {\n      id,\n      contentHtml,\n      ...matterResult.data\n    }\n  }"]},"metadata":{},"sourceType":"module"}