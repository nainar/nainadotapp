{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { getSortedPostsData } from '../lib/posts';\nimport { parseISO, format } from 'date-fns';\n\nvar blogPostsXml = function blogPostsXml(blogPostsData) {\n  var latestPost = blogPostsData[0].date;\n  var postsXml = \"\";\n  blogPostsData.map(function (post) {\n    var postDate = parseISO(post.date);\n\n    if (!latestPost || postDate > latestPost) {\n      latestPost = postDate;\n    }\n\n    postsXml += \"\\n    <url>\\n      <loc>\".concat(post.id, \"</loc>\\n      <lastmod>\").concat(format(postDate, 'LLLL d, yyyy'), \"</lastmod>\\n      <priority>0.80</priority>\\n    </url>\");\n  });\n  return {\n    postsXml: postsXml,\n    latestPost: latestPost\n  };\n};\n\nvar sitemapXml = function sitemapXml(blogPostsData) {\n  var _blogPostsXml = blogPostsXml(blogPostsData),\n      postsXml = _blogPostsXml.postsXml,\n      latestPost = _blogPostsXml.latestPost;\n\n  return \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n    <urlset xmlns=\\\"http://www.sitemaps.org/schemas/sitemap/0.9\\\">\\n    <url>\\n      <loc>https://naina.app/</loc>\\n      <lastmod>\".concat(latestPost, \"</lastmod>\\n      <priority>1.00</priority>\\n    </url>\\n    <url>\\n      <loc>https://naina.app/posts</loc>\\n      <priority>0.8</priority>\\n    </url>\\n    <url>\\n      <loc>https://naina.app/work</loc>\\n      <priority>0.7</priority>\\n    </url>\\n    <url>\\n      <loc>https://naina.app/talks</loc>\\n      <priority>0.5</priority>\\n    </url>\\n    \").concat(postsXml, \"\\n  </urlset>\");\n};\n\nvar Sitemap = /*#__PURE__*/function () {\n  function Sitemap() {\n    _classCallCheck(this, Sitemap);\n  }\n\n  _createClass(Sitemap, null, [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref) {\n      var res, blogPostsData;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              res = _ref.res;\n              blogPostsData = getSortedPostsData();\n              res.setHeader(\"Content-Type\", \"text/xml\");\n              res.write(sitemapXml(blogPostsData));\n              res.end();\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return Sitemap;\n}();\n\nexport { Sitemap as default };","map":{"version":3,"sources":["/Users/nainar/nainadotapp/pages/sitemap.xml.ts"],"names":["getSortedPostsData","parseISO","format","blogPostsXml","blogPostsData","latestPost","date","postsXml","map","post","postDate","id","sitemapXml","Sitemap","res","setHeader","write","end"],"mappings":";;;AACA,SAASA,kBAAT,QAAmC,cAAnC;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,UAAjC;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,aAAD,EAAmB;AACtC,MAAIC,UAAU,GAAGD,aAAa,CAAC,CAAD,CAAb,CAAiBE,IAAlC;AACA,MAAIC,QAAQ,GAAG,EAAf;AACAH,EAAAA,aAAa,CAACI,GAAd,CAAkB,UAAAC,IAAI,EAAI;AACxB,QAAMC,QAAQ,GAAGT,QAAQ,CAACQ,IAAI,CAACH,IAAN,CAAzB;;AACA,QAAI,CAACD,UAAD,IAAeK,QAAQ,GAAGL,UAA9B,EAA0C;AACxCA,MAAAA,UAAU,GAAGK,QAAb;AACD;;AACDH,IAAAA,QAAQ,sCAECE,IAAI,CAACE,EAFN,oCAGKT,MAAM,CAACQ,QAAD,EAAW,cAAX,CAHX,4DAAR;AAMD,GAXD;AAYA,SAAO;AACLH,IAAAA,QAAQ,EAARA,QADK;AAELF,IAAAA,UAAU,EAAVA;AAFK,GAAP;AAID,CAnBD;;AAqBA,IAAMO,UAAU,GAAG,SAAbA,UAAa,CAACR,aAAD,EAAmB;AAAA,sBACHD,YAAY,CAACC,aAAD,CADT;AAAA,MAC5BG,QAD4B,iBAC5BA,QAD4B;AAAA,MAClBF,UADkB,iBAClBA,UADkB;;AAEpC,kMAIeA,UAJf,4WAmBIE,QAnBJ;AAqBD,CAvBD;;IAyBqBM,O;;;;;;;;;;;;;AACYC,cAAAA,G,QAAAA,G;AACvBV,cAAAA,a,GAAgBJ,kBAAkB,E;AACxCc,cAAAA,GAAG,CAACC,SAAJ,CAAc,cAAd,EAA8B,UAA9B;AACAD,cAAAA,GAAG,CAACE,KAAJ,CAAUJ,UAAU,CAACR,aAAD,CAApB;AACAU,cAAAA,GAAG,CAACG,GAAJ;;;;;;;;;;;;;;SALiBJ,O","sourcesContent":["import { NextPageContext } from \"next\";\nimport { getSortedPostsData } from '../lib/posts'\nimport { parseISO, format } from 'date-fns'\n\nconst blogPostsXml = (blogPostsData) => {\n  let latestPost = blogPostsData[0].date;\n  let postsXml = \"\";\n  blogPostsData.map(post => {\n    const postDate = parseISO(post.date);\n    if (!latestPost || postDate > latestPost) {\n      latestPost = postDate;\n    }\n    postsXml += `\n    <url>\n      <loc>${post.id}</loc>\n      <lastmod>${format(postDate, 'LLLL d, yyyy')}</lastmod>\n      <priority>0.80</priority>\n    </url>`;\n  });\n  return {\n    postsXml,\n    latestPost\n  };\n};\n\nconst sitemapXml = (blogPostsData) => {\n  const { postsXml, latestPost } = blogPostsXml(blogPostsData);\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n    <url>\n      <loc>https://naina.app/</loc>\n      <lastmod>${latestPost}</lastmod>\n      <priority>1.00</priority>\n    </url>\n    <url>\n      <loc>https://naina.app/posts</loc>\n      <priority>0.8</priority>\n    </url>\n    <url>\n      <loc>https://naina.app/work</loc>\n      <priority>0.7</priority>\n    </url>\n    <url>\n      <loc>https://naina.app/talks</loc>\n      <priority>0.5</priority>\n    </url>\n    ${postsXml}\n  </urlset>`;\n};\n\nexport default class Sitemap {\n  static async getInitialProps({ res }: any) {\n    const blogPostsData = getSortedPostsData();\n    res.setHeader(\"Content-Type\", \"text/xml\");\n    res.write(sitemapXml(blogPostsData));\n    res.end();\n  }\n}"]},"metadata":{},"sourceType":"module"}